An Introduction to Go 
Meet your next programming language
7 Mar 2018
Tags: golang, introduction, gopher

Paul Stuart
Senior Golang Engineer, Fast Switch
pauleyphonic@gmail.com

# how Golang came to be, 
# who created it, 
# why everyone likes it, 
# what it can do, 
# what it's not good for 
# and then maybe some coding examples to go over.

* What is Go?

“Go is a compiled, concurrent, garbage-collected, statically typed language developed at Google. It is an open source project: Google imports the public repository rather than the other way around.

Go is efficient, scalable, and productive. Some programmers find it fun to work in; others find it unimaginative, even boring.”

-- Rob Pike, co-creator of Go

* What's in a name?

The name "Go" was a playful pun on the sponsor's name.

*Written* references to the languange often use "Golang" because "Go" is ironically rather hard to Google.

* Origins 

.image peterparker.jpg

* Origins of Go

Google's massive codebase and army of engineers creates significant coding challenges.

The creators of Go came from Bell Labs (the originator of Unix), and that "Unix-y" background, as well as Google's needs, informs the language.

Systems programmers were forced to choose between:

- efficient compilation
- efficient execution
- ease of programming

Go aims to address all three.

* Ancestry
Go can be considered a decendant of C/C++.

I like to describe it as the love-child of C and Python.


Fun fact: the compiler was originally written in C, but is now written in Go

* Release History

It was publicly announced in 2009, with version 1.0 being release in 2012.

Version 1.10 was just released last month.

The team does major updates twice a year on a schedule (long distance agile?)

* What's it good for?

Go was envisioned as a language for writing servers.

Lot's of shiny new projects are built with Go:

- Docker
- Kubernetes (Docker orchestration)
- Consul, etcd (distributed key/value stores)
- InfluxDB, Prometheus (timeseries databases / monitoring)
- [[https://talks.golang.org/2013/oscon-dl.slide#1][dl.google.com]]

Go is becoming the de facto language for modern cloud services.

* What's it not good for?

Nothing!

Mobile and desktop apps are not strong targets, but that is evolving

* Why should you use Go?
- Simple (a Java or Python developer can _start_ writing code in a day)
- Fast (runtime speeds equal to Java/C++)
- Lightweight (typically *much* less memory than Java)
- Simple deployment (statically linked binaries!)

* Simple is good

Keyword count in various computer languages (less is more!):

- C#: 102
- F#: 98
- C++: 82
- Java: 50
- PHP: 49
- Ruby 42
- JavaScript: 46
- Python 3.x: 33
- C: 32
- Python 2.7: 31
- *Go:* *25*

source: [[https://stackoverflow.com/questions/4980766/reserved-keywords-count-by-programming-language][Stackoverflow]]

* Language features

- Statically typed (compile time checking)
- Concurency primatives built-in (goroutines, channels)
- First-class functions
- Garbage collection
- Instead of objects and classes, Go has types and methods
- Multiple return values
- An elegant method for exporting variables (Upper-case names are exported)
- Unused variables and imports will cause compilation errors

* Other Benefits

- Static binaries for simple deployment
- Fast build time
- Cross compilation (e.g., build on a Mac and deploy to linux)
- A “batteries-included” standard library
- Strong tooling support
- Very well documented

* What's in the box?

Tooling for Go is rather comprensive. The Go distrbution includes:

- Simple repo cloning (e.g., "go get github.com/example/myrepo")
- A comprehensive testing framework (including benchmarking)
- Application profiling (CPU, memory, etc)
- A pretty-printer for consistent formatting (gofmt)
- Code documentation features (godoc -- generate _and_ _serve_ docs)
- Race detection (vital for a concurrent language)
- play.golang.org -- test and share code snippets online

* Examples

* Concurrency

The following function would normally block until done:

  ...
  // call function that takes a long time
  mySlowFunction() 

  // continue once done 
  myNextFunc()
  ...

If you prefix it it with "go" it will run in another thread without blocking:

  ...
  // call function that takes a long time
  go mySlowFunction() 

  // don't wait for it to finish, move on!
  ...
* Concurrency, part deux

Q: How do I get results back from the function I just ran as a go routine?
A: Channels!

.play channels/main.go /START OMIT/,/END OMIT/

* Interfaces

Interfaces are named collections of method signatures.

They are a key component of the power and flexibility of Go. 

#Unlike Java, you don't declare a type is of an interface. 
#Instead, if your type has the methods that interface requires then it can be used as 
.code interface_1/main.go /START OMIT/,/END OMIT/

* Interfaces, version 1
.play interface_1/main.go /IN OMIT/,/OUT OMIT/

* Interfaces, version 2
.play interface_2/main.go /START OMIT/,/END OMIT/

#* Concurrency
#.play goroutines/main.go /START OMIT/,/END OMIT/

* The Philosopy of Go
.image smartgopher.jpg

* Go is opinionated
“There's more than one way to do it”
-- Larry Wall, creator of Perl

“Do it this way”
-- The Go authors

* Go is idiomatic

Idiomatic _[id-ee-uh-mat-ik]_

adjective: peculiar to or characteristic of a particular language or dialect.

While you can solve problems any way you choose, Go has conventions that one would be wise to heed. 

* The Tao of Go

- Don't communicate by sharing memory, share memory by communicating.
- Gofmt's style is no one's favorite, yet gofmt is everyone's favorite.
- A little copying is better than a little dependency.
- Clear is better than clever.
- Documentation is for users.
- Don't panic.

More here: [[https://go-proverbs.github.io/][Go Proverbs]]

* Complaints about Go

The evergreen issues:

- No generics
- Dependency management is a work in progress
- Verbose error handling
- No native debugger

Language snob whining:

- No polymorphism
- No operator overloading
- It doesn't implement feature "X" of my favorite programming language 

* Things to consider

- Use interfaces when possible
- Closures are a powerful design pattern, embrace them
- Go's simplicity can lure you into thinking you have mastered it before you really have
- Try not to reinvent the wheel (e.g., yet another http router)
- Don't codify application structures too quickly, wait until after you've been around the block a couple times
- It's not Java, don't structure your code as if it was

* Q & A

Bueller? Bueller?
